scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
library LineCurvedDistributor

(* Error events *)
type Error =
  | CodeNotMain
  | CodeInsufficientFunds
  | CodeNotContractOwner
  | CodeNotFound

let zero256 = Uint256 0
let zero128 = Uint128 0
let one256 = Uint256 1
let one128 = Uint128 1

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotMain           => Int32 -1
      | CodeInsufficientFunds => Int32 -2
      | CodeNotContractOwner  => Int32 -3
      | CodeNotFound          => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint128 = @option_value Uint128

let get_price =
  fun (ts: Uint256) =>
  fun (b: Uint256) =>
  fun (price: Uint256) =>
    let ts_dec = builtin div ts b in
    let ts_dec = builtin add ts_dec one256 in
    let p = builtin mul ts_dec price in
    let some_amount = builtin to_uint128 p in
      option_uint128 zero128 some_amount

let get_count =
  fun (a: Uint128) =>
  fun (p: Uint128) =>
    builtin div a p

let change_of_coins =
  fun (count: Uint128) =>
  fun (price: Uint128) =>
  fun (amount: Uint128) =>
    let is_one = builtin eq count one128 in
      match is_one with
      | True => zero128
      | False =>
        builtin sub amount price
      end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract LineCurvedDistributor
(
  contract_owner: ByStr20,
  wallet: ByStr20,
  distributor: ByStr20,
  main: ByStr20 with contract
    field token_id_count: Uint256
  end
)

(* Mutable fields *)

(* Total token count *)
field reserve: Uint256 = zero256
field total: Uint256 = zero256

field tokens_reserve: Map Uint256 String = Emp Uint256 String
field decimal: Uint256 = Uint256 26
field price: Uint256 = Uint256 3000000000000000

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure IsMain()
  is_main_contract = builtin eq main _sender;

  match is_main_contract with
  | True =>
  | False =>
    err = CodeNotMain;
    ThrowError err
  end
end

procedure AddFunds(recipient: ByStr20, amount: Uint128)
  is_zero = builtin eq amount zero128;

  match is_zero with
  | False =>
    msg = {
      _tag: "AddFunds";
      _recipient: recipient;
      _amount: amount
    };
    msgs = one_msg msg;
    send msgs
  | True =>
  end
end

procedure Minting(to: ByStr20)
  total_reserve <- reserve;
  some_uri <- tokens_reserve[total_reserve];

  match some_uri with
  | Some uri =>
    msg_to_demons = {
      _tag: "Mint";
      _recipient: main;
      _amount: Uint128 0;
      to: to;
      token_uri: uri
    };
    msgs = one_msg msg_to_demons;
    send msgs;
    new_total_reserve = builtin sub total_reserve one256;

    reserve := new_total_reserve;
    delete tokens_reserve[total_reserve]
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure CallBought(token_id: Uint256)
  msg_to_distributor = {
    _tag: "OnBoughtMask";
    _recipient: distributor;
    _amount: Uint128 0;
    token_id: token_id
  };
  msgs = one_msg msg_to_distributor;
  send msgs
end

procedure AddReserve(uri: String)
  count_reserve <- reserve;

  new_count_reserve = builtin add count_reserve one256;

  tokens_reserve[new_count_reserve] := uri;
  reserve := new_count_reserve
end

transition AddReserveList(token_uris_list: List String)
  IsContractOwner;
  forall token_uris_list AddReserve
end

transition ChangePrice(value: Uint256)
  IsContractOwner;
  price := value
end

transition ChangeDecimal(value: Uint256)
  IsContractOwner;
  decimal := value
end

transition Buy()
  total_supply <- total;
  decimal_value <- decimal;
  price_value <- price;

  price_amount = get_price total_supply decimal_value price_value;
  count = get_count _amount price_amount;
  is_zero = builtin eq count zero128;

  match is_zero with
  | True =>
    err = CodeInsufficientFunds;
    ThrowError err
  | False =>
    accept;

    change = change_of_coins count price_amount _amount;

    AddFunds _sender change;

    Minting _sender
  end
end

transition TransferZilsToWallet()
  bal <- _balance;

  AddFunds wallet bal
end

(* callbacks *)
transition MintCallBack(recipient: ByStr20, token_id: Uint256, token_uri: String)
  IsMain;  

  new_count <-& main.token_id_count;

  CallBought token_id;
  total := new_count
end
(* callbacks *)

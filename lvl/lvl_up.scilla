scilla_version 0

library LVLUpLib


(* number of decimals as specified in DMZ contract *)
let decimals = Uint128 1000000000000000000
let one128 = Uint128 1
let zero128 = Uint128 0

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end
  
let option_128 = @option_value Uint128
let option_32 = @option_value Uint32

(* amount // DECIMAL + current_lvl *)
(* let lvl_up =
  fun (amount: Uint128) => 
  fun (current_lvl: Uint32) =>
    let some_lvl = builtin to_uint128 current_lvl in
    let lvl = option_128 one128 some_lvl in
    let value = builtin div amount decimals in
    let next_lvl = builtin add value lvl in
    let some_next_lvl = builtin to_uint32 next_lvl in
      option_32 current_lvl some_next_lvl *)

(* compute the fee requried for level up against the fee paid by user *)
let compute_fee =
  fun (new_lvl: Uint32) =>
  fun (fee_multiplier: Uint32) =>
    let some_lvl = builtin to_uint128 new_lvl in
    let lvl = option_128 one128 some_lvl in
    let some_multiplier = builtin to_uint128 fee_multiplier in
    let multiplier = option_128 one128 some_multiplier in
    let fee = builtin mul lvl multiplier in
    builtin mul fee decimals

let check_max_lvl =
  fun (lvl: Uint32) =>
  fun (max: Uint32) =>
    let is_max = builtin lt lvl max in
      match is_max with
      | True => lvl
      | False => max
      end

let increment_lvl =
  fun (current_lvl: Uint32) =>
  fun (max_lvl: Uint32) =>
    let add_lvl = Uint32 1 in
    let new_lvl = builtin add current_lvl add_lvl in
    let is_max = builtin lt new_lvl max_lvl in
      match is_max with
      | True => new_lvl
      | False => max_lvl
      end

(* Error events *)
type Error =
| CodeNotOwner
| CodeNotFound
| CodeMaxLVL
| CodeInsufficientFee

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotOwner        => Int32 -1
      | CodeNotFound        => Int32 -2
      | CodeMaxLVL          => Int32 -3
      | CodeInsufficientFee => Int32 -4
      end
    in
    { _exception : "Error"; code : result_code }


contract LVLUpContract
(
  contract_owner: ByStr20,
  wallet: ByStr20,
  dmz: ByStr20,
  main: ByStr20 with contract
    field token_lvl: Map Uint256 Uint32
  end
)

(* Mutable fields *)
field max_lvl: Uint32 = Uint32 5999
field fee_multiplier: Uint32 = Uint32 10

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure CallUpgrade(new_lvl: Uint32, token_id: Uint256)
  msg_transfer = {
    _tag: "ChangeLVL";
    _recipient: main;
    _amount: zero128;
    token_id: token_id;
    value: new_lvl
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure CallTransferFrom(amount: Uint128, from: ByStr20, to: ByStr20)
  call_transfer_from = {
    _tag: "TransferFrom";
    _recipient: dmz;
    _amount: Uint128 0;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg call_transfer_from;
  send msgs
end

(* Checks if user has paid the correct amount to unlock the next level *)
(* Fee calculation = lvl * 10 DMZ, e.g. to unlock level 2, user has to pay 20 DMZ (2 * 10 DMZ) *)
procedure CheckLvlUpFee(computed_fee: Uint128, paid_fee: Uint128)
  is_less = builtin lt paid_fee computed_fee;
  match is_less with
  | True =>
    err = CodeInsufficientFee;
    ThrowError err
  | False =>
  end
end


(* @dev Upgrade a card to the next level. A card cannot be upgraded past the max level. *)
(* @param fee: Number of DMZ to pay as fees to unlock the next level, should be in DMZ decimals *)
(* @param token_id: Card to be upgraded *)
(* @pre LvlUp contract address must be one of the minter in NFTDemons contract so as to invoke CallUpgrade() *)
transition Upgrade(fee: Uint128, token_id: Uint256)
  some_current_lvl <-& main.token_lvl[token_id];

  match some_current_lvl with
  | Some current_lvl =>
    max <- max_lvl;
    is_max = builtin eq current_lvl max;

    match is_max with
    | True =>
      err = CodeMaxLVL;
      ThrowError err
    | False =>
      new_lvl = increment_lvl current_lvl max;
      
      current_multiplier <- fee_multiplier;
      computed_fee = compute_fee new_lvl current_multiplier;
      CheckLvlUpFee computed_fee fee;
      CallTransferFrom computed_fee _sender wallet;
      CallUpgrade new_lvl token_id;

      e = {
        _eventname: "Upgrade";
        level: new_lvl
      };
      event e
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

(* @dev Used only by contract owner. Sets the max level. *)
transition SetMaxLVL(value: Uint32)
  IsOwner;

  existing_max_lvl <- max_lvl;
  max_lvl := value;

  e = {
    _eventname: "SetMaxLVLSuccess";
    existing_max_lvl: existing_max_lvl;
    new_max_lvl: value
  };
  event e
end

(* @dev  Used only by contract owner. Sets the fee multiplier. Fee multiplier is used to compute card upgrade fee. *)
transition SetFeeMultiplier(new_multiplier: Uint32)
  IsOwner;
  existing_fee_multiplier <- fee_multiplier;
  fee_multiplier := new_multiplier;
  e = {
    _eventname: "SetFeeMultiplier";
    existing_fee_multiplier: existing_fee_multiplier;
    new_fee_multiplier: new_multiplier
  };
  event e
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

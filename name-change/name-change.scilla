scilla_version 0

import BoolUtils IntUtils

library NameLib

(* Error events *)
type Error =
| CodeNotOwner
| CodeMinLVL
| CodeNotTokenOwner
| CodeNotFound
| CodeInputOutOfRange

let zero128 = Uint128 0
let zero32 = Uint32 0
let one_hundred32 = Uint32 100
let one_hundred128 = Uint128 100
let max_dmz = Uint128 16666660000000000000000000

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end
  
let option_uint32 = @option_value Uint32

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotOwner         => Int32 -1
      | CodeMinLVL           => Int32 -2
      | CodeNotTokenOwner    => Int32 -3
      | CodeNotFound         => Int32 -4
      | CodeInputOutOfRange  => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

contract NameContract
(
  contract_owner: ByStr20,
  init_wallet: ByStr20,
  init_dmz: ByStr20,
  main: ByStr20 with contract
    field token_lvl: Map Uint256 Uint32,
    field token_owners: Map Uint256 ByStr20
  end
)

(* Mutable fields *)
field owner: ByStr20 = contract_owner
field pending_owner: Option ByStr20 = None {ByStr20}
field dmz: ByStr20 = init_dmz
field wallet: ByStr20 = init_wallet
field min_lvl_for_change: Uint32 = Uint32 5
field price_for_change: Uint128 = Uint128 100000000000000000000

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure OnlyAdmin()
  current_owner <- owner;
  is_owner = builtin eq current_owner _sender;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure IsTokenOwner(token_id: Uint256)
  some_token_owner <-& main.token_owners[token_id];
  match some_token_owner with
  | Some addr => 
    is_token_owner = builtin eq addr _sender;
    match is_token_owner with
    | True =>
    | False =>
      err = CodeNotTokenOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure CallSetName(token_id: Uint256, new_name: String)
  msg_set_name = {
    _tag: "SetName";
    _recipient: main;
    _amount: zero128;
    token_id: token_id;
    new_name: new_name
  };
  msgs = one_msg msg_set_name;
  send msgs
end

procedure CallTransferFrom(amount: Uint128, from: ByStr20, to: ByStr20)
  dmz_o <- dmz;
  call_transfer_from = {
    _tag: "TransferFrom";
    _recipient: dmz_o;
    _amount: Uint128 0;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg call_transfer_from;
  send msgs
end

procedure CheckNumRange(number: Uint32)
  is_gte_zero = uint32_ge number zero32;
  is_lte_hundred = uint32_le number one_hundred32;
  is_within_range = andb is_gte_zero is_lte_hundred;

  match is_within_range with
  | True =>
  | False =>
    err = CodeInputOutOfRange;
    ThrowError err
  end
end

procedure CheckPriceRange(price: Uint128)
  is_gte_zero = uint128_ge price zero128;
  is_lte_max_dmz = uint128_le price max_dmz;
  is_within_range = andb is_gte_zero is_lte_max_dmz;

  match is_within_range with
  | True =>
  | False =>
    err = CodeInputOutOfRange;
    ThrowError err
  end
end

transition SetName(token_id: Uint256, new_name: String)
  IsTokenOwner token_id;

  min_lvl <- min_lvl_for_change;
  price <- price_for_change;
  some_lvl <-& main.token_lvl[token_id];
  lvl = option_uint32 zero32 some_lvl;
  can_change = builtin lt lvl min_lvl;

  match can_change with
  | False =>
    wallet_o <- wallet;
    CallTransferFrom price _sender wallet_o;
    CallSetName token_id new_name
  | True =>
    err = CodeMinLVL;
    ThrowError err
  end
end

transition ChangeMinLevel(value: Uint32)
  OnlyAdmin;
  CheckNumRange value;
  min_lvl_for_change := value;

  e = {
    _eventname: "MinLevelChanged";
    min_lvl_for_change: value
  };
  event e
end

transition ChangePrice(value: Uint128)
  OnlyAdmin;
  CheckPriceRange value;
  price_for_change := value;

  e = {
    _eventname: "PriceChanged";
    price_for_change: value
  };
  event e
end

(* @dev Updates the dmz contract address; used only by contract owner *)
transition UpdateDMZ(new_dmz: ByStr20)
  OnlyAdmin;
  dmz := new_dmz;
  e = {_eventname: "UpdateDMZ"; new_dmz: new_dmz};
  event e
end

(* @dev Updates the wallet contract address; used only by contract owner *)
transition UpdateWallet(new_wallet: ByStr20)
  OnlyAdmin;
  wallet := new_wallet;
  e = {_eventname: "UpdateWallet"; new_wallet: new_wallet};
  event e
end

(* @dev: Sets a new contract owner; used by contract owner only. *)
(* Current owner can abort the process by calling this transition with their own address *)
(* @param: new_owner New owner address *)
transition RequestOwnershipTransfer(new_owner: ByStr20)
  OnlyAdmin;
  po = Some {ByStr20} new_owner;
  pending_owner := po;
  e = {_eventname: "RequestOwnershipTransfer"; new_owner: new_owner};
  event e
end

(* @dev: New owner accepts the ownership transfer request; used by the new owner only. *)
transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some pend_owner =>
    caller_is_new_owner = builtin eq _sender pend_owner;
    match caller_is_new_owner with
    | True =>
      (* transfer ownership *)
      owner := pend_owner;
      none = None {ByStr20};
      pending_owner := none;
      e = {_eventname: "ConfirmOwnershipTransfer"; new_owner: pend_owner};
      event e
    | False =>
      (* caller is not the new owner, do nothing *)
      err = CodeNotOwner;
      ThrowError err
    end
  | None =>
    (* ownership transfer is not in-progress, do nothing *)
  end
end

(* callbacks *)
transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

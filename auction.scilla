scilla_version 0

import BoolUtils

library AuctionFactoryLib

(* Error events *)
type Error =
| CodeNotContractOwner
| CodeBlockGap
| CodeNotStartedYet
| CodeAlreadyCanceled
| CodeTimeOut
| CodeIsOwner
| CodeInsufficientAmount
| CodeBipLessThanCurrent
| CodeNotFound
| CodeNotEndedOrCanceled

(* custom ADT owner, bidIncrement, startBlock, endBlock, tokenID *)
type StaticAuction =
  | StaticAuction of ByStr20 Uint128 BNum BNum Uint256

(* custom ADT canceled, highestBindingBid, highestBidder, ownerHasWithdrawn, static *)
type Auction =
  | Auction of Bool Uint128 ByStr20 Bool StaticAuction


let zero_address = 0x0000000000000000000000000000000000000000

let zero256 = Uint256 0
let zero128 = Uint128 0

let one256 = Uint256 1
let ff = False

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let get_highest_bidder =
  fun (sender: ByStr20) =>
  fun (bidder: ByStr20) =>
   let is_same = builtin eq bidder sender in
    match is_same with
    | False => sender
    | True => bidder
    end

let blk_gte =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk2 blk1 in
    let bc2 = builtin eq blk1 blk2 in
      orb bc1 bc2

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner   => Int32 -1
      | CodeBlockGap           => Int32 -2
      | CodeNotStartedYet      => Int32 -3
      | CodeAlreadyCanceled    => Int32 -4
      | CodeTimeOut            => Int32 -5
      | CodeInsufficientAmount => Int32 -6
      | CodeBipLessThanCurrent => Int32 -7
      | CodeNotFound           => Int32 -8
      | CodeIsOwner            => Int32 -9
      | CodeNotEndedOrCanceled => Int32 -10
      end
    in
    { _exception : "Error"; code : result_code }

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint128 = @option_value Uint128

let auction_build =
  fun (owner: ByStr20) =>
  fun (increment: Uint128) =>
  fun (start_block: BNum) =>
  fun (end_block: BNum) =>
  fun (token_id: Uint256) =>
    let s = StaticAuction
      owner
      increment
      start_block
      end_block
      token_id
    in
      Auction ff zero128 zero_address ff s

let min = 
  fun (a: Uint128) =>
  fun (b: Uint128) =>
    let is_less = builtin lt a b in
      match is_less with
      | True => a
      | False => b
      end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract AuctionFactory
(
  contract_owner: ByStr20,
  wallet: ByStr20,
  dmz: ByStr20,
  main: ByStr20
)

(* Mutable fields *)
field funds_by_bidder: Map ByStr20 (Map Uint256 Uint128) 
  = Emp ByStr20 (Map Uint256 Uint128)

field auctions: Map Uint256 Auction = Emp Uint256 Auction
field total: Uint256 = zero256

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure EmitBidEvent(highest_binding_bid: Uint128, highest_bidder: ByStr20)
  e = {
    _eventname: "BidEventSuccess";
    highest_binding_bid: highest_binding_bid;
    highest_bidder: highest_bidder
  };
  event e
end

procedure OnlyOwner(owner: ByStr20)
  is_owner = builtin eq _sender owner;

  match is_owner with
  | True =>
    err = CodeIsOwner;
    ThrowError err
  | False =>
  end
end

procedure OnlyAfterStart(start_block: BNum, current: BNum)
  is_less = builtin blt current start_block;

  match is_less with
  | True =>
    err = CodeNotStartedYet;
    ThrowError err
  | False =>
  end
end

procedure OnlyBeforeEnd(end_block: BNum, current: BNum)
  is_less = builtin blt end_block current;

  match is_less with
  | True =>
    err = CodeTimeOut;
    ThrowError err
  | False =>
  end
end

procedure OnlyEndedOrCanceled(canceled: Bool, end_block: BNum, current: BNum)
  is_less = builtin blt current end_block;
  neg_canceled = negb canceled;
  is_reject = andb is_less neg_canceled;

  match is_reject with
  | True =>
    err = CodeNotEndedOrCanceled;
    ThrowError err
  | False =>
  end
end

procedure OnlyNotCanceled(canceled: Bool)
  match canceled with
  | True =>
    err = CodeAlreadyCanceled;
    ThrowError err
  | False =>
  end
end

procedure OnlyNotOwner(owner: ByStr20)
  is_owner = builtin eq _sender owner;

  match is_owner with
  | True =>
    err = CodeIsOwner;
    ThrowError err
  | False =>
  end
end

procedure CheckBipAmount(bid: Uint128, highest_binding_bid: Uint128)
  (* if the user isn't even willing to overbid the highest binding bid, there's nothing for us *)
  (* to do except revert the transaction. *)
  is_less = builtin lt bid highest_binding_bid;
  is_equal = builtin eq bid highest_binding_bid;
  is_revert = orb is_less is_equal;

  match is_revert with
  | True =>
    err = CodeBipLessThanCurrent;
    ThrowError err
  | False =>
  end
end

procedure CallTransferFrom(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    call_transfer_from = {
      _tag: "TransferFrom";
      _recipient: dmz;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_from;
    send msgs
  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  end
end

procedure CheckStartBlock(start_block: BNum, end_block: BNum, current_block: BNum)
  is_incorect = blk_gte start_block end_block;
  is_less = builtin blt start_block current_block;
  is_error = orb is_incorect is_less;

  match is_error with
  | True =>
    err = CodeBlockGap;
    ThrowError err
  | False =>
  end
end

procedure CallTransfer(to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "Transfer";
    _recipient: dmz;
    _amount: zero128;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure ReturnFunds(id: Uint256, to: ByStr20)
  some_amount <- funds_by_bidder[to][id];
  amount = option_uint128 zero128 some_amount;

  delete funds_by_bidder[to][id];

  CallTransfer to amount
end

procedure TransferFromNFT(to: ByStr20, token_id: Uint256)
  transfered = {
    _tag: "TransferFrom";
    _recipient: main;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end

procedure TransferNFT(to: ByStr20, token_id: Uint256)
  transfered = {
    _tag: "Transfer";
    _recipient: main;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end


transition CreateAuction(bid_increment: Uint128, start_block: BNum, end_block: BNum, token_id: Uint256)
  current_block <-& BLOCKNUMBER;
  total_ids <- total;

  CheckStartBlock start_block end_block current_block;

  next_id = builtin add total_ids one256;
  new_auction = auction_build
    _sender
    bid_increment
    start_block
    end_block
    token_id;

  auctions[next_id] := new_auction;
  total := next_id;

  TransferFromNFT _this_address token_id;

  e = {
    _eventname: "AuctionCreated";
    owner: _sender;
    auction: new_auction
  };
  event e
end

transition PlaceBid(amount: Uint128, id: Uint256)
  current_block <-& BLOCKNUMBER;
  some_current_bid <- funds_by_bidder[_sender][id];
  some_auction <- auctions[id];
  (* calculate the user's total bid based on the current amount they've sent to the contract *)
  (* plus whatever has been sent with this transaction *)
  current_bid = option_uint128 zero128 some_current_bid;
  new_bid = builtin add current_bid amount;

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      OnlyNotCanceled canceled;
      (* grab the previous highest bid (before updating fundsByBidder, in case _sender is the *)
      (* highestBidder and is just increasing their maximum bid). *)
      some_highest_bid <- funds_by_bidder[highest_bidder][id];
      highest_bid = option_uint128 zero128 some_highest_bid;
      match static with
      | StaticAuction owner bid_increment start_block end_block token_id =>
        OnlyAfterStart start_block current_block;
        OnlyBeforeEnd end_block current_block;
        OnlyNotOwner owner;
        CheckBipAmount new_bid highest_binding_bid;
        CallTransferFrom amount _sender _this_address;

        (* if the user has overbid the highestBindingBid but not the highestBid, we simply *)
        (* increase the highestBindingBid and leave highestBidder alone. *)
        (* note that this case is impossible if _sender == highestBidder because you can never *)
        (* bid less DMZ than you've already bid. *)
        is_less = builtin lt new_bid highest_bid;
        is_eq = builtin eq new_bid highest_bid;
        is_overbid = orb is_less is_eq;
        funds_by_bidder[_sender][id] := new_bid;

        match is_overbid with
        | True =>
          (* if the user has overbid the highestBindingBid but not the highestBid, we simply *)
          (* increase the highestBindingBid and leave highestBidder alone. *)
          (* note that this case is impossible if _sender == highestBidder because you can never *)
          (* bid less DMZ than you've already bid. *)
          new_highest_binding_bid = builtin add new_bid bid_increment;
          new_highest_binding_bid = min new_highest_binding_bid highest_bid;
          new_auction = Auction canceled new_highest_binding_bid highest_bidder owner_has_withdrawn static;
          auctions[id] := new_auction;
          EmitBidEvent new_highest_binding_bid highest_bidder
        | False =>
          (* if msg.sender is already the highest bidder, they must simply be wanting to raise *)
          (* their maximum bid, in which case we shouldn't increase the highestBindingBid. *)
          (* if the user is NOT highestBidder, and has overbid highestBid completely, we set them *)
          (* as the new highestBidder and recalculate highestBindingBid. *)
          new_highest_bidder = get_highest_bidder _sender highest_bidder;
          new_highest_binding_bid = builtin add highest_bid bid_increment;
          new_highest_binding_bid = min new_bid new_highest_binding_bid;
          new_auction = Auction canceled new_highest_binding_bid new_highest_bidder owner_has_withdrawn static;
          auctions[id] := new_auction;
          EmitBidEvent new_highest_binding_bid new_highest_bidder
        end
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition CancelAuction(id: Uint256)
  current_block <-& BLOCKNUMBER;
  some_auction <- auctions[id];

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      OnlyNotCanceled canceled;
      match static with
      | StaticAuction owner bid_increment start_block end_block token_id =>
        OnlyOwner owner;
        OnlyBeforeEnd end_block current_block;

        new_canceled = True;
        new_auction = Auction new_canceled highest_binding_bid highest_bidder owner_has_withdrawn static;
        auctions[id] := new_auction;

        TransferNFT _sender token_id;
        e = {
          _eventname: "CanceledEventSuccess";
          id: id
        };
        event e
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition Withdraw(id: Uint256)
  current_block <-& BLOCKNUMBER;
  some_auction <- auctions[id];

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      match static with
      | StaticAuction owner bid_increment start_block end_block token_id =>
        OnlyEndedOrCanceled canceled end_block current_block;

        match canceled with
        | True =>
          (* if the auction was canceled, everyone should simply be allowed to withdraw their funds *)
          ReturnFunds id _sender
        | False =>
          (* the auction finished without being canceled *)
          is_owner = builtin eq owner _sender;
          match is_owner with
          | True =>
            (* the auction's owner should be allowed to withdraw the highestBindingBid *)
            new_owner_has_withdrawn = True;
            new_auction = Auction canceled highest_binding_bid highest_bidder new_owner_has_withdrawn static;
            auctions[id] := new_auction;

            delete funds_by_bidder[highest_bidder][id];

            CallTransfer owner highest_binding_bid
          | False =>
            is_highest_bidder = builtin eq highest_bidder _sender;

            match is_highest_bidder with
            | True =>
              (* the highest bidder should only be allowed to withdraw the difference between their *)
              (* highest bid and the highestBindingBid *)
              TransferNFT _sender token_id
            | False =>
              (* anyone who participated but did not win the auction should be allowed to withdraw *)
              (* the full amount of their funds *)
              ReturnFunds id _sender
            end
          end
        end
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

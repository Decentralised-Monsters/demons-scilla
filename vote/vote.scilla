scilla_version 0 

import BoolUtils IntUtils ListUtils PairUtils

library DemonVote 

let zero = Uint32 0 
let one = Uint32 1
let zero_int32 = Int32 0
let bool_true = True
let zero_vote = Int128 0

let register_address_list: List ByStr20 -> List Int32 -> Map ByStr20 Int32 = 
	fun(addresses: List ByStr20) => 
	fun(balances: List Int32) =>
		let init = Emp ByStr20 Int32 in 
		let zip = @list_zip ByStr20 Int32 in
    let zipped = zip addresses balances in
    let foldleft = @list_foldl (Pair ByStr20 Int32) (Map ByStr20 Int32) in
    let f = @fst ByStr20 Int32 in 
    let s = @snd ByStr20 Int32 in 
    let insert = 
      fun(acc : Map ByStr20 Int32) => 
      fun(address_credits_p : Pair ByStr20 Int32) => 
        let address = f address_credits_p in 
        let balance = s address_credits_p in 
        builtin put acc address balance
		in foldleft insert init zipped
	       
let pos_int128_sqrt: Int128 -> Int128 =
  fun(i: Int128) =>
    let uint = builtin to_uint128 i in
    match uint with
      | Some c =>
        let sqrt = builtin isqrt c in
        let int = builtin to_int128 sqrt in
        match int with 
        | Some cast_int =>
          cast_int
        | None =>
          Int128 0
        end
      | None =>
        Int128 0
    end
(* 
  @notice: THE RESULT NEEDS TO BE DIV BY 100 
  This is actually not exactly a sqrt function
  given an integer i
  it returns sign(i)*sqrt(abs(i))*100
*)
let int128_credit_to_vote: Int128 -> Int128 =
   fun(i : Int128) =>
    let zero = Int128 0 in
    let is_negative = int128_lt i zero in
    let ten_k = Int128 10000 in
    let mult_by_10k = builtin mul ten_k i in
    match is_negative with 
    | True => 
      let minus_one = Int128 -1 in
      let positive = builtin mul minus_one mult_by_10k in
      let res = pos_int128_sqrt positive in
      builtin mul minus_one res
    | False  =>
      pos_int128_sqrt mult_by_10k
    end    
    
let int32_to_int128: Int32 -> Int128 =
  fun(i : Int32) =>
    let res = builtin to_int128 i in
    match res with
      | Some c => c
      | None => Int128 0
    end

let int128_map_credits_to_votes: List Int128 -> List Int128 =
  fun(l : List Int128) =>
    let map = @list_map Int128 Int128 in
    map int128_credit_to_vote l

let int128_abs: Int128 -> Int128 = 
  fun(i : Int128) =>
    let zero = Int128 0 in
    let is_negative = int128_lt i zero in
    match is_negative with 
    | True => 
      let minus_one = Int128 -1 in
      builtin mul minus_one i
    | False  => i
    end

let in128_list_abs: List Int128 -> List Int128 = 
  fun(l : List Int128) => 
    let map = @list_map Int128 Int128 in
    map int128_abs l
  
let i128_len: List Int128 -> Uint32 = 
  fun (l : List Int128) => 
    let len = @list_length Int128 in
    len l

let s_len: List String -> Uint32 = 
  fun (l : List String) => 
    let len = @list_length String in
    len l
   
let int128_list_int128_sum : List Int128 -> Int128 =
   fun (l : List Int128) =>
   let foldleft = @list_foldl Int128 Int128 in
   let initState = Int128 0 in
   let addVal =
     fun (acc : Int128) =>
     fun (credits : Int128) =>
       builtin add acc credits
   in
     foldleft addVal initState l

let append_voter : List ByStr20 -> ByStr20 -> List ByStr20 = 
	fun(voter_list : List ByStr20) => 
	fun(new_voter : ByStr20) => 
		Cons {ByStr20} new_voter voter_list

let check_for_member : ByStr20 -> ByStr20 -> Bool =
  fun(sender: ByStr20) =>
  fun(list_element: ByStr20) =>
    builtin eq sender list_element

let is_already_registered : ByStr20 -> List ByStr20 -> Bool = 
  fun(sender: ByStr20) =>
  fun(registered_list: List ByStr20) =>
    let list_mem = @list_mem ByStr20 in
    list_mem check_for_member sender registered_list

let check_valid_times : BNum -> BNum -> BNum -> Bool = 
  fun(current: BNum) => 
  fun(registration: BNum) => 
  fun(decision: BNum) =>
    let registration_over = builtin blt registration current in 
    let decision_not_over = builtin blt current decision in 
      andb registration_over decision_not_over

let do_credit_limit_checks_for_same : Int32 -> Int32 -> Int128-> Uint32 =
    fun (lower_limit : Int32) =>
    fun (upper_limit : Int32) =>
    fun (credit_for_option: Int128) => 
        let some_lower = builtin to_int128 lower_limit in
        match some_lower with 
        | Some lower =>
            let some_upper = builtin to_int128 upper_limit in
            match some_upper with 
            | Some upper =>
                let count_more_than_lower = int128_le lower credit_for_option in
                let count_less_than_upper = int128_le credit_for_option upper in
                let is_valid = andb count_more_than_lower count_less_than_upper in
                match is_valid with
                | True => one
                | False =>  zero
                end
            | None => zero
            end
        | None => zero
        end

let check_list_for_false : Uint32 -> Bool =
    fun (a : Uint32) =>
        builtin eq a zero

let int128_map_credits_to_checks : List Int128 -> Int32 -> Int32 -> List Uint32 =
    fun(l : List Int128) =>
    fun (lower_limit : Int32) =>
    fun (upper_limit : Int32) =>
      let curried_function = do_credit_limit_checks_for_same lower_limit upper_limit in
      let map = @list_map Int128 Uint32 in
      map curried_function l

let make_pair : List String -> List Int128 -> List (Pair (String) (Int128)) =
  fun(list_str: List String) =>
  fun(list_int: List Int128) =>
  let zip = @list_zip String Int128 in
    zip list_str list_int

let register_success_code = Uint32 1 
let owner_register_success_code = Uint32 2

(* vote codes *)
let vote_success_code = Uint32 3

(* events *)
let register_success_event = {_eventname: "register_success"; code: register_success_code}
let vote_success_event = {_eventname: "vote_success"; code: vote_success_code}
let owner_register_event_success = {_eventname: "owner_register_success"; code: owner_register_success_code}

(* Error events *)
type Error =
| CodeSenderIsNotOwner
| CodeTransitionOwnerRegisterMutipleCall
| CodeNotInTime
| CodeRegistrationDeadlineExceeded
| CodeSenderAlreadyRegistered
| CodeVoteCriteriaisNotMet 
| CodeCreditSentNotInAllocatedRange
| CodeSenderNotRegisteredToVote
| CodeInvalidVoteOption

(* Library functions *)
let make_error_event =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeSenderIsNotOwner                      => Int32 -1
      | CodeTransitionOwnerRegisterMutipleCall    => Int32 -2
      | CodeNotInTime                             => Int32 -3
      | CodeRegistrationDeadlineExceeded          => Int32 -4
      | CodeSenderAlreadyRegistered               => Int32 -5
      | CodeVoteCriteriaisNotMet                  => Int32 -6
      | CodeCreditSentNotInAllocatedRange         => Int32 -7
      | CodeSenderNotRegisteredToVote             => Int32 -8
      | CodeInvalidVoteOption                     => Int32 -9
      end
    in
    { _exception : "Error"; code : result_code }

contract DemonVote 
(
    owner: ByStr20,
    expiration_block: BNum, (* last block at which votes are accepted *)
    name: String,           (* decision name *) 
    description: String,
    options: List String,   (* votes can be casted for each of these options *) 
    credit_to_token_ratio: Int32,     (* how many credits get issued for each token in the voters balance *)
    registration_end_time: BNum,      (* block after which users can't sign up for the election anymore *) 
    credit_spending_lower_limit: Int32, (* the lower limit of credit that can be used for voting on options *)
    credit_spending_upper_limit: Int32 (* the upper limit of credit that can be used for voting on options*)
)

(* chacking parameters *)
with
  let zero = Uint32 0 in
  let correct_times = builtin blt registration_end_time expiration_block in 
  let len_func = @list_length String in 
  let option_len = len_func options in 
  let valid_option = builtin lt zero option_len in 
  let is_less = builtin lt credit_spending_lower_limit credit_spending_upper_limit in
  let check = andb correct_times valid_option in
  andb is_less check
=>

field voter_balances : Map ByStr20 Int32 = Emp ByStr20 Int32
(* VOTES have to be div by 100 to get the actual votes since sqrt is an integer sqrt *)
field options_to_votes_map : Map String Int128 = Emp String Int128

(* CENTRALIZED 
this contains the list of users that have registered. right after the election_registration_time the oracle will
assign credits to this *)
field registered_voters : List ByStr20 = Nil {ByStr20}

field owner_register_called : Bool = False

(* Emit Errors *)
procedure EmitError(err : Error)
  e = make_error_event err;
  throw e
end

procedure update_mapping(pair_string_credit: Pair String Int128)
  f = @fst String Int128;
  s = @snd String Int128;
  option = f pair_string_credit;
  credit = s pair_string_credit;
  cur_val <- options_to_votes_map[option];
  match cur_val with
  | Some cur =>
    new_val = builtin add cur credit;
    options_to_votes_map[option] := new_val
  | None =>
    e = CodeInvalidVoteOption;
    EmitError e
  end 
end

procedure add_key_to_mapping(option: String)
    options_to_votes_map[option] := zero_vote
end

(* CENTRALIZED  
this transition is only used at the moment, until we either find a decentralized oracle,
or we can access another contract's state directly *)

(* Only owner can call this transition ONCE after registration_end_time has passed and before expiration_block  *)
transition owner_register(addresses : List ByStr20, credits : List Int32)
  blk <- & BLOCKNUMBER;
  in_time = check_valid_times blk registration_end_time expiration_block;
  match in_time with 
  | True =>
    is_owner = builtin eq _sender owner; 
    match is_owner with
    | False => 
      e = CodeSenderIsNotOwner;
      EmitError e
    | True => 
      is_called <- owner_register_called;
      match is_called with
      | True =>
        e = CodeTransitionOwnerRegisterMutipleCall;
        EmitError e
      | False =>
        voter_balances_ = register_address_list addresses credits; 
        voter_balances := voter_balances_; 
        owner_register_called := bool_true;
        (*  Set key pairs for all options in mapping *)
        forall options add_key_to_mapping;
        e = owner_register_event_success; 
        event e
      end
    end
  | False =>
    e = CodeNotInTime;
    EmitError e
  end
end 

(* users can only call this transition ONCE before the registration_end_time *)
transition register()
    blk <- & BLOCKNUMBER;
    can_register = builtin blt blk registration_end_time;
    match can_register with
    | False =>
        e = CodeRegistrationDeadlineExceeded;
        EmitError e
    | True =>  
        registered_voters_old <- registered_voters;
        already_registered = is_already_registered _sender registered_voters_old;    
        match already_registered with
        | True => 
            e = CodeSenderAlreadyRegistered;
            EmitError e
        | False =>
          new_voter_list = append_voter registered_voters_old _sender; 
          registered_voters := new_voter_list; 
          e = register_success_event;
          event e
        end
    end
end 

transition vote(credits_sender_str: List String, credits_sender_int: List Int128)
  blk <- & BLOCKNUMBER;
  in_time = check_valid_times blk registration_end_time expiration_block; 
  match in_time with 
  | False => 
    e = CodeNotInTime;
    EmitError e
  | True => 
    (* check if credits_sender_str.length == credits_sender_int.length *)
    credits_sender_str_len = s_len credits_sender_str;
    credits_sender_int_len = i128_len credits_sender_int;
    lists_are_equal = builtin eq credits_sender_str_len credits_sender_int_len;
  	option_len = s_len options;
  	check_len = uint32_le credits_sender_int_len option_len;

  	(* for all credits_sender take absolute val *)
    (* the abs_val_sender_credits is obtained in reverse order *)
    abs_val_sender_credits = in128_list_abs credits_sender_int;
  	(* get sum of abs val *)
  	abs_val_sum_int128 = int128_list_int128_sum abs_val_sender_credits;
  	(* get voter balance *)
  	voter_balance <- voter_balances[_sender];
  	match voter_balance with
  	 | Some voter_b =>
  	   (* voter balance to int128 *)
      	voter_balance_int128 = int32_to_int128 voter_b;
      	(* check if credits_sum <= balance *)
        bal_valid = int128_le abs_val_sum_int128 voter_balance_int128;
      	is_valid = andb bal_valid check_len;
        are_valid = andb is_valid lists_are_equal;
      	match are_valid with
      	 | False =>
          e = CodeVoteCriteriaisNotMet;
          EmitError e
      	 | True =>
         (* do checking for credit spending *)    
          result = int128_map_credits_to_checks credits_sender_int credit_spending_lower_limit credit_spending_upper_limit;
          c_list_exists = @list_exists Uint32;
          credit_check_operation_error_status = c_list_exists check_list_for_false result;
          match credit_check_operation_error_status with
              | True =>
                e = CodeCreditSentNotInAllocatedRange;
                EmitError e
              | False =>
                (* do votin stuff *)
                votes_sender = int128_map_credits_to_votes credits_sender_int;
                updated_pair = make_pair credits_sender_str votes_sender;
                forall updated_pair update_mapping;
                (* can vote only once *)
                zero = Int32 0;
                voter_balances[_sender] := zero;
                e = vote_success_event; 
                event e
           end    	  
      	 end
  	 | None =>
        e = CodeSenderNotRegisteredToVote;
        EmitError e
  	end
  end

end

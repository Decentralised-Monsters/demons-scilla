scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import ListUtils

library BondingCurvedDistributor

(* Error events *)
type Error =
  | CodeNotContractOwner

let zero256 = Uint256 0
let zero128 = Uint128 0

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner  => Int32 -1
      end
    in
    { _exception : "Error"; code : result_code }

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint256 = @option_value Uint256
(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract BondingCurvedDistributor
(
  contract_owner: ByStr20,
  distributor: ByStr20,
  wallet: ByStr20
)

(* Mutable fields *)

(* Total token count *)
field reserve: Uint256 = zero256
field total: Uint256 = zero256

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end


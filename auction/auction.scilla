scilla_version 0

import BoolUtils IntUtils

library AuctionFactoryLib

(* Error events *)
type Error =
| CodeNotContractOwner
| CodeBlockGap
| CodeNotStartedYet
| CodeAlreadyCanceled
| CodeTimeOut
| CodeIsAuctionOwner
| CodeBidLessThanCurrent
| CodeNotFound
| CodeNotEndedOrCanceled
| CodeOnlyWithdrawn
| CodeNotTokenOwner
| CodeAuctionHasBid
| CodeNotEnded
| CodeTokenAlreadyInAuction
| CodeTokenListedInDirectSale
| CodeAuctionNotApprovedToTransfer
| CodeIncrementLessThanRequired
| CodePriceLessThanRequired
| CodePauseNotPause
| CodeInputOutOfRange
| CodeWithdrawNoBid
| CodeAlreadyWithdrawn
| CodeBidderNoFunds

(* custom ADT owner, bidIncrement, startBlock, endBlock, tokenID *)
type StaticAuction =
  | StaticAuction of ByStr20 Uint128 BNum BNum Uint256

(* custom ADT canceled, highestBindingBid, highestBidder, ownerHasWithdrawn, static *)
type Auction =
  | Auction of Bool Uint128 ByStr20 Bool StaticAuction

type Operation =
  | Add
  | Sub

let zero_address = 0x0000000000000000000000000000000000000000
let max_dmz = Uint128 16666660000000000000000000

let zero256 = Uint256 0
let zero128 = Uint128 0
let zero64 = Uint64 0
let zero32 = Uint32 0

let one_hundred128 = Uint128 100
let one256 = Uint256 1
let one64 = Uint64 1
let ff = False

let add_operation = Add
let sub_operation = Sub

let not_pause = Uint32 0
let on_pause = Uint32 1

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let blk_gte =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let lt = builtin blt blk1 blk2 in
      negb lt

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner             => Int32 -1
      | CodeBlockGap                     => Int32 -2
      | CodeNotStartedYet                => Int32 -3
      | CodeAlreadyCanceled              => Int32 -4
      | CodeTimeOut                      => Int32 -5
      | CodeBidLessThanCurrent           => Int32 -6
      | CodeNotFound                     => Int32 -7
      | CodeIsAuctionOwner               => Int32 -8
      | CodeNotEndedOrCanceled           => Int32 -9
      | CodeOnlyWithdrawn                => Int32 -10
      | CodeNotTokenOwner                => Int32 -11
      | CodeAuctionHasBid                => Int32 -12
      | CodeNotEnded                     => Int32 -13
      | CodeTokenAlreadyInAuction        => Int32 -14
      | CodeTokenListedInDirectSale      => Int32 -15
      | CodeAuctionNotApprovedToTransfer => Int32 -16
      | CodeIncrementLessThanRequired    => Int32 -17
      | CodePriceLessThanRequired        => Int32 -18
      | CodePauseNotPause                => Int32 -19 
      | CodeInputOutOfRange              => Int32 -20
      | CodeWithdrawNoBid                => Int32 -21
      | CodeAlreadyWithdrawn             => Int32 -22
      | CodeBidderNoFunds                => Int32 -23
      end
    in
    { _exception : "Error"; code : result_code }

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint128 = @option_value Uint128
let option_uint64 = @option_value Uint64
let option_address = @option_value ByStr20

let new_counter =
    fun (current: Uint64) =>
    fun (op: Operation) =>
      match op with
      | Add => builtin add one64 current
      | Sub => builtin sub current one64
      end

let auction_build =
  fun (owner: ByStr20) =>
  fun (increment: Uint128) =>
  fun (min_price: Uint128) =>
  fun (start_block: BNum) =>
  fun (end_block: BNum) =>
  fun (token_id: Uint256) =>
    let s = StaticAuction
      owner
      increment
      start_block
      end_block
      token_id
    in
      Auction ff min_price owner ff s

let min = 
  fun (a: Uint128) =>
  fun (b: Uint128) =>
    let is_less = builtin lt a b in
      match is_less with
      | True => a
      | False => b
      end

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

(* Compute "(x * y) / z" with protection against integer overflows *)
let muldiv : Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        (* this must never happen, hence we throw an integer overflow exception *)
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end

let is_bid_map_empty =
  fun(m : Map Uint256 Uint128) =>
    let map_size = builtin size m in
    builtin eq map_size zero32


(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract AuctionFactory
(
  contract_owner: ByStr20,
  init_wallet: ByStr20,
  init_dmz: ByStr20,
  main: ByStr20 with contract
    field token_owners: Map Uint256 ByStr20,
    field token_approvals: Map Uint256 ByStr20
  end,
  init_marketplace: ByStr20 with contract
    field token_orderbook: Map Uint256 Uint256 
  end
)

(* Mutable fields *)
field owner: ByStr20 = contract_owner
field pending_owner: Option ByStr20 = None {ByStr20}
field dmz: ByStr20 = init_dmz
field wallet: ByStr20 = init_wallet

field direct_listing: ByStr20 with contract 
  field token_orderbook: Map Uint256 Uint256 
end = init_marketplace

field funds_by_bidder: Map ByStr20 (Map Uint256 Uint128) 
  = Emp ByStr20 (Map Uint256 Uint128)

field pause: Uint32 = not_pause

field auctions: Map Uint256 Auction = Emp Uint256 Auction
field bid_count: Map Uint256 Uint64 = Emp Uint256 Uint64
(* token_id to auction_id mapping for quick check if card is already up for auction *)
field token_auctions: Map Uint256 Uint256 = Emp Uint256 Uint256
field total: Uint256 = zero256
field commission: Uint128 = Uint128 5
(* min bid increment in percentage *)
field min_increment: Uint128 = Uint128 5
(* min price to sell; 1 DMZ *)
field min_auction_price: Uint128 = Uint128 1000000000000000000

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  current_owner <- owner;
  is_contract_owner = builtin eq current_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure EmitBidEvent(auction_id: Uint256, token_id: Uint256, highest_binding_bid: Uint128, highest_bidder: ByStr20)
  e = {
    _eventname: "BidEventSuccess";
    auction_id: auction_id;
    token_id: token_id;
    highest_binding_bid: highest_binding_bid;
    highest_bidder: highest_bidder
  };
  event e
end

procedure OnlyWithdrawn(owner_has_withdrawn: Bool)
  match owner_has_withdrawn with
  | True =>
  | False =>
    err = CodeOnlyWithdrawn;
    ThrowError err
  end
end

procedure OnlyAuctionOwner(auction_owner: ByStr20)
  is_owner = builtin eq _sender auction_owner;

  match is_owner with
  | True =>
  | False =>
    err = CodeIsAuctionOwner;
    ThrowError err
  end
end

procedure OnlyAfterStart(start_block: BNum, current: BNum)
  is_less = builtin blt current start_block;

  match is_less with
  | True =>
    err = CodeNotStartedYet;
    ThrowError err
  | False =>
  end
end

procedure OnlyBeforeEnd(end_block: BNum, current: BNum)
  is_less = builtin blt end_block current;

  match is_less with
  | True =>
    err = CodeTimeOut;
    ThrowError err
  | False =>
  end
end

procedure OnlyEnded(end_block: BNum, current: BNum)
  is_ended = builtin blt end_block current;
  match is_ended with
  | True =>
  | False =>
    (* end_block is not less than current_block *)
    (* auction has not ended yet *)
    err = CodeNotEnded;
    ThrowError err
  end
end

procedure OnlyEndedOrCanceled(canceled: Bool, end_block: BNum, current: BNum)
  not_ended = builtin blt current end_block;
  not_canceled = negb canceled;
  active = andb not_ended not_canceled;

  match active with
  | True =>
    err = CodeNotEndedOrCanceled;
    ThrowError err
  | False =>
    (* active = not ended and not canceled *)
  end
end

procedure OnlyNotCanceled(canceled: Bool)
  match canceled with
  | True =>
    err = CodeAlreadyCanceled;
    ThrowError err
  | False =>
  end
end

procedure OnlyNotAuctionOwner(auction_owner: ByStr20)
  is_owner = builtin eq _sender auction_owner;

  match is_owner with
  | True =>
    err = CodeIsAuctionOwner;
    ThrowError err
  | False =>
  end
end

(* demon must have been approved; token_approvals[token_id] = this_address *)
procedure CheckApproved(token_id: Uint256)
  some_address <-& main.token_approvals[token_id];
  address = option_address zero_address some_address;
  is_self = builtin eq _this_address address;

  match is_self with
  | True =>
  | False =>
    err = CodeAuctionNotApprovedToTransfer;
    ThrowError err
  end
end

(* check if auction price is set below the min price *)
procedure CheckAuctionPrice(min_price: Uint128)
  min_auction_price_o <- min_auction_price;
  is_gte_min = uint128_ge min_price min_auction_price_o;
  match is_gte_min with
  | True =>
  | False =>
    err = CodePriceLessThanRequired;
    ThrowError err
  end
end


(* check if bid amount is higher than the next min bid *)
procedure CheckBidAmount(bid: Uint128, highest_binding_bid: Uint128, bid_increment: Uint128)
  increment = muldiv highest_binding_bid bid_increment one_hundred128;
  min_bid = builtin add highest_binding_bid increment;
  is_gte_current_highest = uint128_ge bid min_bid;

  match is_gte_current_highest with
  | True =>
  | False =>
    (* if the user isn't even willing to overbid the highest binding bid, there's nothing for us *)
    (* to do except revert the transaction. *)
    err = CodeBidLessThanCurrent;
    ThrowError err
  end
end

(* check if bid increment set below min bid increment *)
procedure CheckBidIncrement(bid_increment: Uint128)
  min_increment_o <- min_increment;
  is_gte_min = uint128_ge bid_increment min_increment_o;
  match is_gte_min with
  | True =>
  | False =>
    err = CodeIncrementLessThanRequired;
    ThrowError err
  end
end

(* check if token_id is already in marketplace contract *)
procedure CheckDirectListing(token_id: Uint256)
  current_direct_listing <- direct_listing;
  order_id <-& current_direct_listing.token_orderbook[token_id];
  match order_id with
  | Some id =>
    err = CodeTokenListedInDirectSale;
    ThrowError err
  | None =>
  end
end

procedure CheckNumRange(number: Uint128)
  is_gte_zero = uint128_ge number zero128;
  is_lte_hundred = uint128_le number one_hundred128;
  is_within_range = andb is_gte_zero is_lte_hundred;

  match is_within_range with
  | True =>
  | False =>
    err = CodeInputOutOfRange;
    ThrowError err
  end
end

procedure CheckPriceRange(price: Uint128)
  is_gte_zero = uint128_ge price zero128;
  is_lte_max_dmz = uint128_le price max_dmz;
  is_within_range = andb is_gte_zero is_lte_max_dmz;

  match is_within_range with
  | True =>
  | False =>
    err = CodeInputOutOfRange;
    ThrowError err
  end
end

procedure CheckPause(expected: Uint32)
  curent_pause <- pause;
  is_eq = builtin eq expected curent_pause;
  match is_eq with
  | True =>
  | False =>
    err = CodePauseNotPause;
    ThrowError err
  end
end

procedure CheckStartBlock(start_block: BNum, end_block: BNum, current_block: BNum)
  is_incorect = blk_gte start_block end_block;
  is_less = builtin blt start_block current_block;
  is_error = orb is_incorect is_less;

  match is_error with
  | True =>
    err = CodeBlockGap;
    ThrowError err
  | False =>
  end
end


procedure CheckTokenOwner(token_id: Uint256)
  some_token_owner <-& main.token_owners[token_id];
  token_owner = option_address zero_address some_token_owner;
  is_address_call = builtin eq _sender token_owner;
  match is_address_call with
  | False =>
    err = CodeNotTokenOwner;
    ThrowError err
  | True =>
  end
end

(* check if the auction entry can be removed from the map *)
(* auction can be removed if owner and other users have withdrawn  *)
procedure DeleteAuction(id: Uint256)
  some_auction <- auctions[id];
  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      (* check bid count *)
      (* if everyone has withdrawn, it should be zero *)
      some_bid_count <- bid_count[id];

      match some_bid_count with
      | Some current_count =>
        (* some users have not withdrawn *)
      | None =>
        (* no such id; all users withdrawn *)
        match owner_has_withdrawn with
        | True =>
          (* clear to delete this entry *)
          delete auctions[id]
        | False =>
          (* wait for owner to withdraw *)
        end
      end
    end
  | None =>
    (* possible for entry to be deleted; do nothing *)
  end
end

(* check if can remove the entry funds_by_bidder[bidder] to prevent empty maps *)
procedure DeleteFundsByBidder(bidder: ByStr20, auction_id: Uint256)
  delete funds_by_bidder[bidder][auction_id];
  bid_map <- funds_by_bidder[bidder];

  match bid_map with
  | Some bid_entry =>
    is_map_empty = is_bid_map_empty bid_entry;
    
    match is_map_empty with
    | True =>
      (* bidder has no other bids after deletion, can remove entire map *)
      delete funds_by_bidder[bidder]
    | False =>
      (* bidder has bid on other auctions, do nothing *)
    end
  | None =>
    (* bidder has not bidder, do nothing *)
  end
end


procedure IncrementBidCount(current_bid: Uint128, id: Uint256)
  is_zero = builtin eq current_bid zero128;
  
  match is_zero with
    | True =>
      (* new unique bidder; record the count *)
      some_bid_count <- bid_count[id];
      current_bid_count = option_uint64 zero64 some_bid_count;
      new_bid_count = builtin add current_bid_count one64;
      bid_count[id] := new_bid_count
    | False =>
      (* existing bidder; do nothing; don't increase count *)
  end
end

procedure DecreaseBidCount(id: Uint256)
  some_bid_count <- bid_count[id];

  match some_bid_count with
    | Some existing_count =>
      new_bid_count = builtin sub existing_count one64;
      is_zero = builtin eq new_bid_count zero64;
      
      match is_zero with
      | True =>
        delete bid_count[id]
      | False =>
        bid_count[id] := new_bid_count
      end
    | None =>
      (* no such auction id *)
  end
end

procedure CallTransferFromDMZ(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq amount zero128;
  match is_zero with
  | True =>
  | False =>
    dmz_o <- dmz;
    call_transfer_from = {
      _tag: "TransferFrom";
      _recipient: dmz_o;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_from;
    send msgs
  end
end

procedure CallTransferDMZ(to: ByStr20, amount: Uint128)
  is_zero = builtin eq amount zero128;
  match is_zero with
  | True =>
  | False =>
    dmz_o <- dmz;
    msg_transfer = {
      _tag: "Transfer";
      _recipient: dmz_o;
      _amount: zero128;
      to: to;
      amount: amount
    };
    msgs = one_msg msg_transfer;
    send msgs
  end
end


procedure TransferFromNFT(to: ByStr20, token_id: Uint256)
  transfered = {
    _tag: "TransferFrom";
    _recipient: main;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end

procedure TransferNFT(to: ByStr20, token_id: Uint256)
  transfered = {
    _tag: "Transfer";
    _recipient: main;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end

(* @dev Put up a card for auction listing. *)
(* User must invoke demon contract - SetApprove(auction_contract, token_id) prior to this *)
(* @param bid_increment: Min increment percentage rate for each subsequent bid *)
(* @param min_price: Starting bid price *)
(* @param start_block: Block number at which the auction should begin *)
(* @param end_block: Block number at which the auction should end *)
(* @param token_id: Token/Card put up for listing *)
transition CreateAuction(bid_increment: Uint128, min_price: Uint128, start_block: BNum, end_block: BNum, token_id: Uint256)
  current_block <-& BLOCKNUMBER;
  CheckStartBlock start_block end_block current_block;  
  CheckPause not_pause;
  CheckApproved token_id;
  CheckDirectListing token_id;
  CheckTokenOwner token_id;
  CheckBidIncrement bid_increment;
  CheckAuctionPrice min_price;

  total_ids <- total;
  auction_id <- token_auctions[token_id];

  match auction_id with
  | Some auction =>
    (* card has already been placed on auction *)
    (* either the auction is on-going or has ended but the card has not yet transferred to winner *)
    err = CodeTokenAlreadyInAuction;
    ThrowError err
  | None =>
    next_id = builtin add total_ids one256;
    new_auction = auction_build
      _sender
      bid_increment
      min_price
      start_block
      end_block
      token_id;

    auctions[next_id] := new_auction;
    token_auctions[token_id] := next_id;
    total := next_id;
    bid_count[next_id] := one64;

    TransferFromNFT _this_address token_id;

    e = {
      _eventname: "AuctionCreated";
      owner: _sender;
      auction_id: next_id;
      auction: new_auction
    };
    event e
  end
end

(* @dev Bid on an auction listing. DMZ are locked up until Withdraw() is invoked *)
(* User must invoke dmz contract - IncreaseAllowance(auction_contract, amount) prior to this *)
(* @param id: Auction id *)
(* @param amount: Bid amount (DMZ amount); if _sender is the first time bidding on this card, the bid amount is the ENTIRE amount *)
(* If _sender has bidded before, then _sender has intention to raise his/her previous bid *)
(* bid amount becomes the DIFFERENCE of _sender's previous bid and current bid *)
transition PlaceBid(id: Uint256, amount: Uint128)
  CheckPause not_pause;
  current_block <-& BLOCKNUMBER;
  some_current_bid <- funds_by_bidder[_sender][id];
  some_auction <- auctions[id];
  (* calculate the user's total bid based on the current amount they've sent to the contract *)
  (* plus whatever has been sent with this transaction *)
  current_bid = option_uint128 zero128 some_current_bid;
  new_bid = builtin add current_bid amount;

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      OnlyNotCanceled canceled;
      (* grab the previous highest bid (before updating fundsByBidder, in case _sender is the *)
      (* highestBidder and is just increasing their maximum bid). *)
      some_highest_bid <- funds_by_bidder[highest_bidder][id];
      highest_bid = option_uint128 zero128 some_highest_bid;

      (* the highest bid might be zero if this listing is the first time that someone has bid *)
      (* funds_by_bidder[highest_bidder] would return 0 *)
      is_highest_bid_zero = builtin eq highest_bid zero128;

      match static with
      | StaticAuction auction_owner bid_increment start_block end_block token_id =>
        OnlyAfterStart start_block current_block;
        OnlyBeforeEnd end_block current_block;
        OnlyNotAuctionOwner auction_owner;
        CheckBidAmount new_bid highest_binding_bid bid_increment;

        (* transfer the required dmz to this contract *)
        CallTransferFromDMZ amount _sender _this_address;

        (* if the user has overbid the highestBindingBid but not the highestBid, we simply *)
        (* increase the highestBindingBid and leave highestBidder alone. *)
        (* note that this case is impossible if _sender == highestBidder because you can never *)
        (* bid less DMZ than you've already bid. *)
        is_less = builtin lt new_bid highest_bid;
        is_eq = builtin eq new_bid highest_bid;
        is_raise_self_bid = orb is_less is_eq;
        funds_by_bidder[_sender][id] := new_bid;

        match is_highest_bid_zero with
        | True =>
          (* no existings bids *)
          (* system auto adjust highest binding bid *)
          (* set the bidder as the highest bidder *)
          increment = muldiv highest_binding_bid bid_increment one_hundred128;
          new_highest_binding_bid = builtin add highest_binding_bid increment;
          
          new_highest_binding_bid = min new_highest_binding_bid new_bid;
          new_auction = Auction canceled new_highest_binding_bid _sender owner_has_withdrawn static;
          auctions[id] := new_auction;

          IncrementBidCount current_bid id;
          EmitBidEvent id token_id new_highest_binding_bid _sender
        | False =>
          (* listing has existing bids *)
          match is_raise_self_bid with
          | True =>
            (* user has bid less than highest bid *)
            (* if the user has overbid the highestBindingBid but not the highestBid, we simply *)
            (* increase the highestBindingBid and leave highestBidder alone. *)
            (* note that this case is impossible if _sender == highestBidder because you can never *)
            (* bid less DMZ than you've already bid. *)
            increment = muldiv new_bid bid_increment one_hundred128;
            new_highest_binding_bid = builtin add new_bid increment;

            new_highest_binding_bid = min new_highest_binding_bid highest_bid;
            new_auction = Auction canceled new_highest_binding_bid highest_bidder owner_has_withdrawn static;
            auctions[id] := new_auction;

            IncrementBidCount current_bid id;
            EmitBidEvent id token_id new_highest_binding_bid highest_bidder
          | False =>
            (* user has bid more than highest bid *)
            (* set user as the new highestBidder and recalculate highestBindingBid. *)
            increment = muldiv highest_bid bid_increment one_hundred128;
            new_highest_binding_bid = builtin add highest_bid increment;

            new_highest_binding_bid = min new_bid new_highest_binding_bid;
            new_auction = Auction canceled new_highest_binding_bid _sender owner_has_withdrawn static;
            auctions[id] := new_auction;

            IncrementBidCount current_bid id;
            EmitBidEvent id token_id new_highest_binding_bid _sender
          end
        end
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

(* @dev Allows the owner to drop the auction listing if the auction has no bids or the auction has ended without any bids *)
(* @param id: Auction id to cancel *)
transition CancelAuction(id: Uint256)
  CheckPause not_pause;
  current_block <-& BLOCKNUMBER;
  some_auction <- auctions[id];

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      OnlyNotCanceled canceled;
      match static with
      | StaticAuction auction_owner bid_increment start_block end_block token_id =>
        OnlyAuctionOwner auction_owner;

        (* check if highest bidder is auction_owner *)
        (* if so, this implies no one has bid; can proceed with cancelling *)
        (* otherwise if there is at least one bid, auction_owner is not allowed to cancel auction *)
        allow_to_cancel = builtin eq highest_bidder auction_owner;

        match allow_to_cancel with
        | True =>
          (* highest bidder == auction_owner; no one has yet to place a bid on this listing *)
          (* go ahead with cancel process *)
          new_canceled = True;
          new_auction = Auction new_canceled highest_binding_bid highest_bidder owner_has_withdrawn static;
          auctions[id] := new_auction;

          TransferNFT _sender token_id;
          delete bid_count[id];
          delete token_auctions[token_id];
          DeleteAuction id;
          e = {
            _eventname: "CanceledEventSuccess";
            auction_id: id;
            token_id: token_id
          };
          event e
        | False =>
          (* highest bidder is not owner; someone has place a bid on this listing *)
          (* not allow to cancel *)
          err = CodeAuctionHasBid;
          ThrowError err
        end
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end


(* @dev Allows owner and bidders to claim their bids after auction has ended *)
(* The owner would receive the winning bid amount minus the commission *)
(* The one who wins the bid would receive their card. *)
(* The rest would receive back their bids *)
(* The auction listing here would definitely have at least one bid; because if the owner has cancelled it prior to end, the auction wouldn't exist *)
(* @param id: Auction id to claim from *)
transition Withdraw(id: Uint256)
  CheckPause not_pause;
  current_block <-& BLOCKNUMBER;
  some_auction <- auctions[id];
  dev_commission <- commission;

  match some_auction with
  | Some auction =>
    match auction with
    | Auction canceled highest_binding_bid highest_bidder owner_has_withdrawn static =>
      match static with
      | StaticAuction auction_owner bid_increment start_block end_block token_id =>
        OnlyEnded end_block current_block;

        (* is highest bidder is owner, this implies no one has bid *)
        (* auction owner should call CancelAuction *)
        is_no_bidder = builtin eq highest_bidder auction_owner;

        match is_no_bidder with
        | True =>
          err = CodeWithdrawNoBid;
          ThrowError err
        | False =>
          (* highest bidder exists *)
          is_highest_bidder = builtin eq highest_bidder _sender;
          is_auction_owner = builtin eq auction_owner _sender;

          match is_auction_owner with
          | True =>
            match is_highest_bidder with
            | True =>
              (* not possible to reach here because there is at least one bid *)
              err = CodeIsAuctionOwner;
              ThrowError err
            | False =>
              match owner_has_withdrawn with
              | True =>
                (* owner withdraw already *)
                err = CodeAlreadyWithdrawn;
                ThrowError err
              | False =>
                (* owner have not withdrawn *)
                (* owner claiming the winning bid *)
                some_bid_amount <- funds_by_bidder[highest_bidder][id];
    
                new_owner_has_withdrawn = True;
                new_auction = Auction canceled highest_binding_bid highest_bidder new_owner_has_withdrawn static;
                auctions[id] := new_auction;
                
                (* winner to pay only highest binding bid, remainder to be refunded *)
                amount = option_uint128 zero128 some_bid_amount;
                extra = builtin sub amount highest_binding_bid;
                com = muldiv dev_commission highest_binding_bid one_hundred128;
                value = builtin sub highest_binding_bid com;
    
                wallet_o <- wallet;
                CallTransferDMZ highest_bidder extra;
                CallTransferDMZ auction_owner value;
                CallTransferDMZ wallet_o com;
                
                DecreaseBidCount id;
                DeleteFundsByBidder highest_bidder id;
                DeleteAuction id;

                e = {
                  _eventname: "WithdrawCollectProfits";
                  auction_owner: auction_owner;
                  auction_id: id;
                  token_id: token_id;
                  profits: value;
                  msg: "owner collect profits"
                };
                event e
              end
            end
          | False =>
            (* other bidders *)
            match is_highest_bidder with
            | True =>
              (* user is highest bidder; transfer card ownership to winner *)
              (* remove the token_id mapping to allow new owner to place it for auction *)
              TransferNFT _sender token_id;
              DecreaseBidCount id;
              DeleteAuction id;
              delete token_auctions[token_id];

              e = {
                _eventname: "WithdrawCollectDemon";
                auction_owner: auction_owner;
                auction_id: id;
                token_id: token_id;
                msg: "winner collect demon"
              };
              event e
            | False =>
              (* user did not win bid; refund back locked up DMZ *)
              some_bids <- funds_by_bidder[_sender][id];
              
              match some_bids with
              | Some locked_bids =>
                CallTransferDMZ _sender locked_bids;
                DeleteFundsByBidder _sender id;
                DecreaseBidCount id;
                DeleteAuction id;

                e = {
                  _eventname: "WithdrawCollectRefunds";
                  auction_owner: auction_owner;
                  auction_id: id;
                  token_id: token_id;
                  msg: "participant collect refunds"
                };
                event e
              | None =>
                err = CodeBidderNoFunds;
                ThrowError err
              end
            end
          end
        end
      end
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

(* @dev Updates the commission percentage *)
(* @param new_commission: New commision, e.g. if 10%, new_commission = 10 *)
transition UpdateCommission(new_commission: Uint128)
  IsContractOwner;
  CheckNumRange new_commission;
  old_com <- commission;
  commission := new_commission;
  e = {
    _eventname: "UpdateCommission";
    previous_commission: old_com;
    new_commission: new_commission
  };
  event e
end

(* @dev Updates the marketplace contract address; used only by contract owner *)
transition UpdateDirectListing(new_marketplace: ByStr20 with contract field token_orderbook: Map Uint256 Uint256 end)
  IsContractOwner;
  direct_listing := new_marketplace;
  e = {_eventname : "UpdateDirectListing"; new_direct_listing: new_marketplace};
  event e
end

(* @dev Updates the dmz contract address; used only by contract owner *)
transition UpdateDMZ(new_dmz: ByStr20)
  IsContractOwner;
  dmz := new_dmz;
  e = {_eventname: "UpdateDMZ"; new_dmz: new_dmz};
  event e
end

(* @dev Updates the wallet contract address; used only by contract owner *)
transition UpdateWallet(new_wallet: ByStr20)
  IsContractOwner;
  wallet := new_wallet;
  e = {_eventname: "UpdateWallet"; new_wallet: new_wallet};
  event e
end

(* @dev Updates the min auction price required when users create an auction; used only by contract owner *)
transition UpdateMinAuctionPrice(new_min_auction_price: Uint128)
  IsContractOwner;
  CheckPriceRange new_min_auction_price;
  min_auction_price := new_min_auction_price;
  e = {_eventname: "UpdateMinAuctionPrice"; new_min_auction_price: new_min_auction_price};
  event e
end

(* @dev Updates the min increment rate required when users create an auction; used only by contract owner *)
transition UpdateMinIncrement(new_min_increment: Uint128)
  IsContractOwner;
  CheckNumRange new_min_increment;
  min_increment := new_min_increment;
  e = {_eventname: "UpdateMinIncrement"; new_min_increment: new_min_increment};
  event e
end

(* @dev Pause or unpause the marketplace; used only by contract owner *)
transition UpdatePause()
  IsContractOwner;
  status <- pause;
  is_pause = builtin eq status on_pause;
  match is_pause with
  | True =>
    pause := not_pause
  | False =>
    pause := on_pause
  end;
  updated_pause <- pause;
  e = {_eventname : "UpdatePause"; pause: updated_pause};
  event e
end

(* @dev: Transfer DMZ from auction contract to a target address; used by contract owner only *)
(* used only for emergencies in the event that a user wrongly transferred DMZ into the auction contract *)
transition DrainDMZ(recipient: ByStr20, amount: Uint128)
  IsContractOwner;
  CallTransferDMZ recipient amount;
  e = {_eventname : "DrainDMZ"; recipient: recipient; amount: amount};
  event e
end

(* @dev: Sets a new contract owner; used by contract owner only. *)
(* Current owner can abort the process by calling this transition with their own address *)
(* @param: new_owner New owner address *)
transition RequestOwnershipTransfer(new_owner: ByStr20)
  IsContractOwner;
  po = Some {ByStr20} new_owner;
  pending_owner := po;
  e = {_eventname: "RequestOwnershipTransfer"; new_owner: new_owner};
  event e
end

(* @dev: New owner accepts the ownership transfer request; used by the new owner only. *)
transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some pend_owner =>
    caller_is_new_owner = builtin eq _sender pend_owner;
    match caller_is_new_owner with
    | True =>
      (* transfer ownership *)
      owner := pend_owner;
      none = None {ByStr20};
      pending_owner := none;
      e = {_eventname: "ConfirmOwnershipTransfer"; new_owner: pend_owner};
      event e
    | False =>
      (* caller is not the new owner, do nothing *)
      err = CodeNotContractOwner;
      ThrowError err
    end
  | None =>
    (* ownership transfer is not in-progress, do nothing *)
  end
end

(*Empty callbacks*)
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
